# List the teachers who have NULL for their department.
#Why we cannot use =
#You might think that the phrase dept=NULL would work here but it doesn't - you can use the phrase dept IS NULL
#That's not a proper explanation.
#No it's not, but you can read a better explanation at Wikipedia:NULL.

SELECT name FROM teacher 
WHERE dept IS NULL;

# Note the INNER JOIN misses the teachers with no department and the departments with no teacher.

SELECT teacher.name, dept.name
 FROM teacher INNER JOIN dept
           ON (teacher.dept=dept.id);

# Use a different JOIN so that all teachers are listed.

SELECT teacher.name, dept.name FROM teacher
LEFT JOIN dept ON (teacher.dept = dept.id);

# COALESCE FUNCTION
# COALESCE takes any number of arguments and returns the first value that is not null.
# COALESCE(x,y,z) = x if x is not NULL
  COALESCE(x,y,z) = y if x is NULL and y is not NULL
  COALESCE(x,y,z) = z if x and y are NULL but z is not NULL
  COALESCE(x,y,z) = NULL if x and y and z are all NULL

# COALESCE can be useful when you want to 
#replace a NULL value with some other value. 
#In this example you show the name of the party for each MSP that has a party. For the MSP with no party (such as Canavan, Dennis) you show the string None.

SELECT name, party
      ,COALESCE(party,'None') AS aff
  FROM msp WHERE name LIKE 'C%';

# NULLIF FUNCTION
#NULLIF returns NULL if the two arguments are equal; 
#otherwise NULLIF returns the first argument.

 NULLIF(x,y) = NULL if x=y
   NULLIF(x,y) = x if x != y 

#NULLIF can be used to replace a specific value with NULL. 
#In this example the party Lab is replaced with NULL.

SELECT name, party
      ,NULLIF(party,'Lab') AS aff
  FROM msp WHERE name LIKE 'C%'

# NVL takes two arguments and returns the first value that is not null.

 NVL(x,y) = x if x is not NULL
   NVL(x,y) = y if x is NULL

# NVL can be useful when you want to replace a 
#NULL value with some other value. In this example you show 
#the name of the party for each MSP that has a party. 
#For the MSP with no party (such as Canavan, Dennis) 
#you show the string None.

SELECT name, party
      ,COALESCE(party,'None') AS aff
  FROM msp WHERE name LIKE 'C%';

# CASE FUNCTION
#CASE allows you to return different values under different conditions.
#If there no conditions match (and there is not ELSE) then NULL is returned.

CASE WHEN condition1 THEN value1 
       WHEN condition2 THEN value2  
       ELSE def_value 
  END 

SELECT name, population
      ,CASE WHEN population<1000000 
            THEN 'small'
            WHEN population<10000000 
            THEN 'medium'
            ELSE 'large'
       END
  FROM bbc

# Use a different JOIN so that all departments are listed.
SELECT teacher.name, dept.name FROM teacher
RIGHT JOIN dept ON (teacher.dept = dept.id);

# Use COALESCE to print the mobile number. 
Use the number '07986 444 2266' if there is no number given. 
Show teacher name and mobile number or '07986 444 2266'

# Use CASE to show the name of each teacher followed by '
# Sci' if the teacher is in dept 1 or 2, show 'Art' if the teacher's dept is 3 and 'None' otherwise.

SELECT teacher.name, 
   CASE WHEN teacher.dept IN (1, 2)
          THEN 'Sci'
          WHEN teacher.dept = 3
          THEN 'Art'
          ELSE 'None'
          END
FROM teacher;

# SELECT teacher.name, COALESCE(mobile, '07986 444 2266') FROM teacher;

# Use the COALESCE function and a LEFT JOIN to 
#print the teacher name and department name. 
#Use the string 'None' where there is no department

SELECT teacher.name, COALESCE(dept.name, 'None') as C FROM teacher
LEFT JOIN dept ON (teacher.dept = dept.id);

# Use COUNT to show the number of teachers and the number of mobile phones.

SELECT COUNT(teacher.name), COUNT(teacher.mobile)
FROM teacher;

# Use COUNT and GROUP BY dept.name to show each department and the number of staff. 
#Use a RIGHT JOIN to ensure that the Engineering department is listed.

SELECT dept.name, COUNT(teacher.name) FROM teacher
RIGHT JOIN dept ON (teacher.dept = dept.id)
GROUP BY dept.name;

# Use CASE to show the name of each teacher followed 
#by 'Sci' if the teacher is in dept 1 or 2 and 'Art' otherwise.

SELECT teacher.name,
CASE WHEN teacher.dept IN (1, 2)
           THEN 'Sci'
           ELSE 'Art'
           END
 FROM teacher;

# Use CASE to show the name of each teacher 
followed by 'Sci' if the teacher is in dept 1 or 2, show 'Art' if the teacher's dept is 3 and 'None' otherwise.

SELECT teacher.name, 
   CASE WHEN teacher.dept IN (1, 2)
          THEN 'Sci'
          WHEN teacher.dept = 3
          THEN 'Art'
          ELSE 'None'
          END
FROM teacher;









