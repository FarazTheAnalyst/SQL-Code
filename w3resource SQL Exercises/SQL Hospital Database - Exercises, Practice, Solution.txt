/**
1. From the following table, write a SQL query to find out which nurses 
have not yet been registered. Return all the fields of nurse table.
**/
SELECT * FROM nurse
WHERE registered = 'f';

/**
2. From the following table, write a SQL query to identify the nurses in 
charge of each department. Return nursename as “name”, Position as “Position”.
**/
SELECT name, position
FROM nurse
WHERE position = 'Head Nurse';

/**
3. From the following tables, write a SQL query to identify the physicians 
who are the department heads. Return Department name as “Department” and 
Physician name as “Physician”
**/
SELECT d.name as Department, p.name as Physician
FROM physician p
JOIN department d ON p.employeeid = d.head;

/**
4. From the following table, write a SQL query to count the number of 
patients who scheduled an appointment with at least one physician. 
Return count as "Number of patients taken at least one appointment".
**/
SELECT count(DISTINCT patient) AS "No. of patients taken at least one appointment"
FROM appointment;

/**
5. From the following table, write a SQL query to locate the floor and 
block where room number 212 is located. Return block floor as "Floor" 
and block code as "Block".
**/
SELECT blockfloor as "floor", blockcode as "Block"
FROM room
WHERE roomnumber = 212;

/**
6. From the following table, write a SQL query to count the number 
available rooms. Return count as "Number of available rooms".
**/
SELECT COUNT(*) as "Number of available rooms"
 FROM room
WHERE unavailable = 'f';

/**
7. From the following table, write a SQL query to count the number of 
unavailable rooms. Return count as "Number of unavailable rooms".
**/
SELECT COUNT(*) AS "Number of unavailable rooms"
FROM room
WHERE unavailable = 't';

/**
8. From the following tables, write a SQL query to identify the physician 
and the department with which he or she is affiliated. Return Physician 
name as "Physician", and department name as "Department".
**/
SELECT p.name as "Physician", d.name as "Department"
FROM physician p
JOIN department d ON p.employeeid = d.departmentid
JOIN affiliated_with a ON d.departmentid = department;

/**
9. From the following tables, write a SQL query to find those physicians 
who have received special training. Return Physician name as “Physician”,
 treatment procedure name as "Treatment".
**/
SELECT p.name as "Physician", pr.name as "Treatment" 
FROM physician p
JOIN procedure pr
ON p.employeeid = pr.code
JOIN trained_in tr ON pr.code = tr.treatment;

/**
10. From the following tables, write a SQL query to find those physicians 
who are yet to be affiliated. Return Physician name as "Physician", 
Position, and department as "Department".
**/
SELECT p.name as "Physician", p.position, d.name as "Department"
FROM physician p
JOIN affiliated_with a ON p.employeeid = a.department
JOIN department d ON a.department = d.departmentid;

/**
11. From the following tables, write a SQL query to identify physicians 
who are not specialists. Return Physician name as "Physician", 
position as "Designation".
**/
SELECT p.name as "Physician", p.position as "Designation"
FROM physician p
LEFT JOIN trained_in t ON p.employeeid = t.physician
WHERE t.treatment IS NULL
ORDER BY p.employeeid;

/**
12. From the following tables, write a SQL query to find the patients with 
their physicians by whom they received preliminary treatment. 
Return Patient name as "Patient", address as "Address" and Physician name as "Physician".
**/
SELECT pa.name as "Patient", pa.address as "Address", p.name as "Physician"
FROM patient pa
JOIN physician p ON pa.pcp = p.employeeid;

/**
13. From the following tables, write a SQL query to identify the patients 
and the number of physicians with whom they have scheduled appointments. 
Return Patient name as "Patient", number of Physicians as "Appointment 
for No. of Physicians"
**/
SELECT pt.name as "Patient", COUNT(app.*) as "Appointment for No.of Physicians"
FROM patient pt 
JOIN appointment app ON pt.pcp= app.physician
GROUP BY pt.name;

/**
14. From the following tables, write a SQL query to count the number of 
unique patients who have been scheduled for examination room 'C'. 
Return unique patients as "No. of patients got appointment for room C".
**/
SELECT COUNT(DISTINCT patient) as "No. of patients got appointment for room C"
FROM appointment
WHERE examinationroom = 'C';

/**
15. From the following tables, write a SQL query to find the names of the 
patients and the room number where they need to be treated. 
Return patient name as "Patient", examination room as "Room No.", 
and starting date time as Date "Date and Time of appointment".
**/
SELECT pa.name as "Patient", app.examinationroom as "Room No", app.start_dt_time as "Date and Time of appointment"
FROM patient pa
JOIN appointment app ON pa.ssn = app.patient;

/**
16. From the following tables, write a SQL query to identify the nurses
 and the room in which they will assist the physicians. Return Nurse Name 
as "Name of the Nurse" and examination room as "Room No.".
**/
SELECT n.name as "Name of the Nurse", app.examinationroom as "Room No"
FROM nurse n
JOIN appointment app ON n.employeeid = app.prepnurse;

/**
17. From the following tables, write a SQL query to locate the patients 
who attended the appointment on the 25th of April at 10 a.m. Return Name 
of the patient, Name of the Nurse assisting the physician, Physician 
Name as "Name of the physician", examination room as "Room No.", 
schedule date and approximate time to meet the physician.
**/
SELECT pa.name as "Name of the Patient", n.name as "Name of the Nurse assisting the physician",  ph.name as "Name of the Physician", app.examinationroom as "Room No"
FROM patient pa
JOIN appointment app ON pa.ssn = app.patient
JOIN nurse n ON app.prepnurse = n.employeeid
JOIN physician ph ON app.physician = ph.employeeid
WHERE app.start_dt_time = '2008-04-25 10:00:00' ;

/**
18. From the following tables, write a SQL query to identify those 
patients and their physicians who do not require any nursing assistance. 
Return Name of the patient as "Name of the patient", Name of the 
Physician as "Name of the physician" and examination room as "Room No.".
**/
SELECT pa.name as "Name of the Patient", ph.name as "Name of the Physician", app.examinationroom as "Room No"
FROM patient pa
JOIN appointment app ON pa.ssn = app.patient
JOIN physician ph ON app.physician = ph.employeeid
WHERE app.prepnurse IS NULL;

/**
19. From the following tables, write a SQL query to locate the patients' 
treating physicians and medications. Return Patient name as "Patient", 
Physician name as "Physician", Medication name as "Medication"
**/
SELECT t.name AS "Patient",
       p.name AS "Physician",
       m.name AS "Medication"
FROM patient t
JOIN prescribes s ON s.patient=t.ssn
JOIN physician p ON s.physician=p.employeeid
JOIN medication m ON s.medication=m.code;

/**
20. From the following tables, write a SQL query to identify patients who 
have made an advanced appointment. Return Patient name as "Patient", 
Physician name as "Physician" and Medication name as "Medication".
**/
SELECT t.name AS "Patient",
       p.name AS "Physician",
       m.name AS "Medication"
FROM patient t
JOIN prescribes s ON s.patient=t.ssn
JOIN physician p ON s.physician=p.employeeid
JOIN medication m ON s.medication=m.code
WHERE s.appointment IS NOT NULL;


/**
21. From the following tables, write a SQL query to find those patients 
who did not schedule an appointment. Return Patient name as "Patient", 
Physician name as "Physician" and Medication name as "Medication".
**/
SELECT t.name AS "Patient",
       p.name AS "Physician",
       m.name AS "Medication"
FROM patient t
JOIN prescribes s ON s.patient=t.ssn
JOIN physician p ON s.physician=p.employeeid
JOIN medication m ON s.medication=m.code
WHERE s.appointment IS NULL;

/**
22. From the following table, write a SQL query to count the number of 
available rooms in each block. Sort the result-set on ID of the block. 
Return ID of the block as "Block", count number of available rooms as 
"Number of available rooms".
**/
SELECT blockcode AS "Block",
       count(*) "Number of available rooms"
FROM room
WHERE unavailable='false'
GROUP BY blockcode
ORDER BY blockcode;

/**
23. From the following table, write a SQL query to count the number of 
available rooms in each floor. Sort the result-set on block floor. 
Return floor ID as "Floor" and count the number of available rooms as 
"Number of available rooms".
**/
SELECT blockfloor AS "Floor",
       count(*) "Number of available rooms"
FROM room
WHERE unavailable='f'
GROUP BY blockfloor
ORDER BY blockfloor;

/**
24. From the following table, write a SQL query to count the number of 
available rooms for each floor in each block. Sort the result-set on floor 
ID, ID of the block. Return the floor ID as "Floor", ID of the block as 
"Block", and number of available rooms as "Number of available rooms".
**/
SELECT blockfloor AS "Floor",
       blockcode AS "Block",
       count(*) "Number of available rooms"
FROM room
WHERE unavailable='false'
GROUP BY blockfloor,
        blockcode
ORDER BY blockfloor,
        blockcode;

/**
25. From the following tables, write a SQL query to count the number of 
rooms that are unavailable in each block and on each floor. 
Sort the result-set on block floor, block code. Return the floor ID as 
"Floor", block ID as "Block", and number of unavailable as 
“Number of unavailable rooms".
**/
SELECT blockfloor AS "Floor",
       blockcode AS "Block",
       count(*) "Number of available rooms"
FROM room
WHERE unavailable='true'
GROUP BY blockfloor,
        blockcode
ORDER BY blockfloor,
        blockcode;

/**
26. From the following tables, write a SQL query to find the floor 
where the maximum number of rooms are available. Return floor ID as 
"Floor", count "Number of available rooms".
**/
SELECT blockfloor as "Floor",
       count(*) AS  "No of available rooms"
FROM room
WHERE unavailable='false'
GROUP BY blockfloor
HAVING count(*) = 
         (SELECT max(zz) AS highest_total
         FROM
         ( SELECT 
              count(*) AS zz
               FROM room
               WHERE unavailable='false'
               GROUP BY blockfloor ) AS 
                                  inner_result );

/**
27. From the following tables, write a SQL query to locate the floor with 
the minimum number of available rooms. Return floor ID as "Floor", 
Number of available rooms.
**/
SELECT blockfloor as "Floor",
       count(*) AS  "No of available rooms"
FROM room
WHERE unavailable='false'
GROUP BY blockfloor
HAVING count(*) =
  (SELECT min(zz) AS highest_total
   FROM
     ( SELECT blockfloor ,
              count(*) AS zz
      FROM room
      WHERE unavailable='false'
      GROUP BY blockfloor ) AS t );

/**
28. From the following tables, write a SQL query to find the name of the 
patients, their block, floor, and room number where they admitted.
**/
SELECT p.name AS "Patient",
       s.room AS "Room",
       r.blockfloor AS "Floor",
       r.blockcode AS "Block"
FROM stay s
JOIN patient p ON s.patient=p.ssn
JOIN room r ON s.room=r.roomnumber;


/**
29. From the following tables, write a SQL query to locate the nurses and 
the block where they are scheduled to attend the on-call patients.
Return Nurse Name as "Nurse", Block code as "Block".
**/
SELECT n.name AS "Nurse",
       o.blockcode AS "Block"
FROM nurse n
JOIN on_call o ON o.nurse=n.employeeid;

/**
30. From the following tables, write a SQL query to get
a) name of the patient,
b) name of the physician who is treating him or her,
c) name of the nurse who is attending him or her,
d) which treatement is going on to the patient,
e) the date of release,
f) in which room the patient has admitted and which floor and block the 
room belongs to respectively.
**/
SELECT p.name AS "Patient",
       y.name AS "Physician",
       n.name AS "Nurse",
       s.end_time AS "Date of release",
       pr.name as "Treatement going on",
       r.roomnumber AS "Room",
       r.blockfloor AS "Floor",
       r.blockcode AS "Block"
FROM undergoes u
JOIN patient p ON u.patient=p.ssn
JOIN physician y ON u.physician=y.employeeid
LEFT JOIN nurse n ON u.assistingnurse=n.employeeid
JOIN stay s ON u.patient=s.patient
JOIN room r ON s.room=r.roomnumber
JOIN procedure pr on u.procedure=pr.code;


/**
31. From the following tables, write a SQL query to find all physicians 
who have performed a medical procedure but are not certified to do so. 
Return Physician name as "Physician".
**/
SELECT DISTINCT p.name AS Physician
FROM physician p
JOIN undergoes u ON p.employeeid = u.physician
LEFT JOIN trained_In ti ON u.physician = ti.physician
             AND u.procedure = ti.treatment            
WHERE ti.treatment IS NULL;


/**
32. From the following tables, write a SQL query to find all physicians, 
their procedures, the date when the procedure was performed, 
and the name of the patient on whom the procedure was performed, 
but the physicians are not certified to perform that procedure. 
Return Physician Name as "Physician", Procedure Name as "Procedure", 
date, and Patient. Name as "Patient".
**/
SELECT p.name AS Physician,
       pr.name AS Procedure,
       u.date,
       pt.name AS Patient
FROM physician p
JOIN undergoes u ON u.physician = p.EmployeeID
JOIN patient pt ON u.patient = pt.SSN
JOIN PROCEDURE pr ON u.procedure = pr.Code
LEFT JOIN trained_in t ON t.treatment = u.procedure
                         AND t.physician = u.physician
WHERE t.treatment IS NULL;


/**
33. From the following table, write a SQL query to find all physicians 
who completed a medical procedure with certification after the expiration 
date of their license. Return Physician Name as "Physician", Position as "Position".
**/
SELECT p.name AS Physician,
       p.position AS Position
FROM physician p
JOIN undergoes u ON p.employeeid = u.physician
JOIN trained_in t ON t.physician = u.physician
                    AND t.treatment = u.procedure
WHERE u.date > t.certificationexpires;


/**
34. From the following table, write a SQL query to find all physicians who 
have completed medical procedures with certification after their 
certificates expired. Return Physician Name as "Physician", 
Position as" Position", Procedure Name as "Procedure", Date of 
Procedure as "Date of Procedure", Patient Name as "Patient", and 
expiry date of certification as "Expiry Date of Certificate".
**/
SELECT y.name as "Physician", y.position as "Position", pr.name as "Procedure", u.date as "Date of Procedure", pa.name as "Patient",
t.certificationexpires as "Expiry Date of Certificate"
FROM physician y 
JOIN undergoes u ON y.employeeid = u.physician
JOIN patient pa ON u.patient= u.ssn
and pr.code = t.treatment
and y.employeeid = t.physician
and u.date > t.certificationexpires;

/**
35. From the following table, write a SQL query to find out, which nurses 
have been on call for room 122 in the past. Return name of the nurses.
**/
SELECT n.name
FROM nurse n
JOIN on_call oc ON n.employeeid = oc.nurse
JOIN room r ON oc.blockfloor = r.blockfloor
            AND oc.blockcode = r.blockcode
WHERE r.roomnumber = 122;

/**
36. From the following table, write a SQL query to determine which 
patients have been prescribed medication by their primary care physician. 
Return Patient name as "Patient", and Physician Name as "Physician".
**/
SELECT pt.name AS "Ptient",
       p.name AS "Physician"
FROM patient pt
JOIN prescribes pr ON pr.patient=pt.ssn
JOIN physician p ON pt.pcp=p.employeeid
WHERE pt.pcp=pr.physician
  AND pt.pcp=p.employeeid;

/**
37. From the following table, write a SQL query to find those patients 
who have undergone a procedure costing more than $5,000, as well as 
the name of the physician who has provided primary care, should be 
identified. Return name of the patient as "Patient", name of the 
physician as "Primary Physician", and cost for the procedure as "Procedure Cost".
**/
SELECT pt.name AS " Patient ",
p.name AS "Primary Physician",
pd.cost AS " Procedure Cost"
FROM patient pt
JOIN undergoes u ON u.patient=pt.ssn
JOIN physician p ON pt.pcp=p.employeeid
JOIN PROCEDURE pd ON u.procedure=pd.code
WHERE pd.cost>5000;


/**
38. From the following table, write a SQL query to find those patients 
with at least two appointments in which the nurse who prepared the 
appointment was a registered nurse and the physician who provided primary 
care should be identified. Return Patient name as "Patient", Physician 
name as "Primary Physician", and Nurse Name as "Nurse".
**/
SELECT p.name as "Patient"
,y.name as "Primary Physician"
,n.name as "Nurse"
FROM appointment a
JOIN patient p ON a.patient = p.ssn
JOIN nurse n ON a.prepnurse = n.employeeid
JOIN physician y ON a.physician = y.employeeid;

/**
39. From the following table, write a SQL query to identify those 
patients whose primary care is provided by a physician who is not the 
head of any department. Return Patient name as "Patient", 
Physician Name as "Primary care Physician".
**/
SELECT pt.name AS "Patient",
       p.name AS "Primary care Physician"
FROM patient pt
JOIN physician p ON pt.pcp = p.employeeid
LEFT JOIN department d ON pt.pcp = d.head
WHERE d.head IS NULL; 





