1. From the following tables write a SQL query to find the salesperson and customer who reside in the same city. Return Salesman, cust_name and city.
SELECT salesman.name, customer.cust_name, salesman.city
FROM salesman inner join customer
ON  salesman.city = customer.city;

2. From the following tables write a SQL query to find those orders where the order amount exists between 500 and 2000. Return ord_no, purch_amt, cust_name, city.
SELECT orders.ord_no, orders.purch_amt, customer.cust_name, customer.city
FROM orders inner join customer
ON orders.customer_id = customer.customer_id
WHERE orders.purch_amt BETWEEN 500 and 2000;

3. From the following tables write a SQL query to find the salesperson(s) and the customer(s) he represents. Return Customer Name, city, Salesman, commission.
SELECT customer.cust_name, customer.city, salesman.name, salesman.commission
FROM customer inner join salesman
ON customer.salesman_id = salesman.salesman_id;

4. From the following tables write a SQL query to find 
salespeople who received commissions of more than 12 percent
from the company. Return Customer Name, customer city, Salesman, commission.
SELECT customer.cust_name, customer.city, salesman.name, salesman.commission
FROM customer inner join salesman
ON salesman.salesman_id = customer.salesman_id
WHERE commission > 0.12;

5. /**From the following tables write a SQL query to locate those 
salespeople who do not live in the same city where their 
customers live and have received a commission of more than 
12% from the company. Return Customer Name, customer city, Salesman, salesman city, commission**/
SELECT customer.cust_name, customer.city, salesman.name, salesman.city, salesman.commission
FROM customer inner join salesman
ON customer.salesman_id = salesman.salesman_id
WHERE customer.city <> salesman.city
AND salesman.commission > 0.12;

/**6. From the following tables write a SQL query to find the 
details of an order. Return ord_no, ord_date, purch_amt, Customer Name, grade, Salesman, commission.
**/
SELECT orders.ord_no, orders.ord_date, orders.purch_amt, customer.cust_name, customer.grade, salesman.name, salesman.commission
FROM orders INNER JOINcustomer
ON orders.customer_id = customer.customer_id 
INNER JOIN salesman
ON orders.salesman_id = salesman.salesman_id;

/**7. Write a SQL statement to join the tables salesman, 
customer and orders so that the same column of each table 
appears once and only the relational rows are returned.
 **/
SELECT * FROM 
orders
NATURAL JOIN customer
NATURAL JOIN salesman;

/**8. From the following tables write a SQL query to display the
 customer name, customer city, grade, salesman, salesman city.
 The results should be sorted by ascending customer_id. 
 **/
SELECT customer.cust_name, customer.city, customer.grade, 
       salesman.name AS "Salesman", salesman.city 
FROM customer LEFT JOIN salesman 
ON customer.salesman_id = salesman.salesman_id 
ORDER BY customer.customer_id;

/**9. From the following tables write a SQL query to find those customers with a grade less than 300. Return cust_name, customer city, grade, Salesman, salesmancity. The result should be ordered by ascending customer_id.
 **/
SELECT  customer.cust_name, customer.city, customer.grade, salesman.name, salesman.city
FROM customer left outer join salesman
ON customer.salesman_id = salesman.salesman_id
WHERE customer.grade < 300
ORDER BY customer_id;

/**10. Write a SQL statement to make a report with customer 
name, city, order number, order date, and order amount in 
ascending order according to the order date to determine whether any of the existing customers have placed an order or not.
  **/
SELECT customer.cust_name, customer.city, orders.ord_no, orders.ord_date, orders.purch_amt
FROM customer LEFT join orders
ON orders.customer_id = customer.customer_id
order by orders.ord_date;

/**11. SQL statement to generate a report with customer name, 
city, order number, order date, order amount, salesperson name, 
and commission to determine if any of the existing customers have not placed orders or if they have placed orders through their salesman or by themselves.

**/
SELECT customer.cust_name, customer.city, orders.ord_no, orders.ord_date, orders.purch_amt, salesman.name, salesman.commission
FROM customer LEFT OUTER JOIN orders
ON customer.customer_id = orders.customer_id
LEFT OUTER JOIN salesman
ON salesman.salesman_id = orders.salesman_id;

/**12. Write a SQL statement to generate a list in ascending 
order of salespersons who work either for one or more customers
 or have not yet joined any of the customers.
**/
SELECT * FROM customer 
RIGHT OUTER JOIN salesman 
ON customer.salesman_id = salesman.salesman_id
order by salesman.name;

/**13. From the following tables write a SQL query to list all salespersons along with customer name, city, grade, order number, date, and amount.
/**
SELECT customer.cust_name, customer.city, customer.grade, orders.ord_no, orders.ord_date, orders.purch_amt
FROM customer RIGHT OUTER JOIN salesman
ON customer.salesman_id = salesman.salesman_id
RIGHT OUTER JOIN orders
orders.customer_id = customer.customer_id;

/**14. Write a SQL statement to make a list for the salesmen who 
either work for one or more customers or yet to join any of the 
customer. The customer may have placed, either one or more orders
 on or above order amount 2000 and must have a grade, or he may not have placed any order to the associated supplier.
**/
SELECT a.cust_name, a.city, a.grade, 
       b.name AS "Salesman", 
       c.ord_no, c.ord_date, c.purch_amt 
FROM customer a RIGHT OUTER JOIN salesman b 
ON b.salesman_id = a.salesman_id 
LEFT OUTER JOIN orders c 
ON c.customer_id = a.customer_id 
WHERE c.purch_amt >= 2000 
AND a.grade IS NOT NULL;

/**15.For those customers from the existing list who put one or 
more orders, or which orders have been placed by the customer 
who is not on the list, create a report containing the customer 
name, city, order number, order date, and purchase amount
**/
SELECT customer.cust_name, customer.city, orders.ord_no, orders.ord_date, orders.purch_amt
FROM customer LEFT OUTER JOIN orders
ON customer.customer_id = orders.customer_id;

/**16. Write a SQL statement to generate a report with the 
customer name, city, order no. order date, purchase amount for 
only those customers on the list who must have a grade and 
placed one or more orders or which order(s) have been placed by 
the customer who neither is on the list nor has a grade.
**/
SELECT customer.cust_name, customer.city, orders.ord_no, orders.ord_date, orders.purch_amt
FROM customer FULL OUTER JOIN orders
ON customer.customer_id = orders.customer_id
WHERE customer.grade IS NOT NULL;

/**17. Write a SQL query to combine each row of the salesman 
table with each row of the customer table.**/
SELECT * FROM salesman  CROSS JOIN customer;

/**18. Write a SQL statement to create a Cartesian product 
between salesperson and customer, i.e. each salesperson will 
appear for all customers and vice versa for that salesperson who belongs to that city.
**/
SELECT * FROM salesman CROSS JOIN customer
WHERE salesman.city IS NOT NULL;

/**19. Write a SQL statement to create a Cartesian product 
between salesperson and customer, i.e. each salesperson will 
appear for every customer and vice versa for those salesmen who belong to a city and customers who require a grade.
**/
SELECT * FROM salesman CROSS JOIN customer 
WHERE salesman.city is not null
and customer.grade is not null;

/**20. Write a SQL statement to make a Cartesian product between 
salesman and customer i.e. each salesman will appear for all 
customers and vice versa for those salesmen who must belong to 
a city which is not the same as his customer and the customers should have their own grade.
**/
SELECT * FROM salesman CROSS JOIN customer
WHERE salesman.city is not null
and salesman.city <> customer.city
and customer.grade is not null;

/**21. From the following tables write a SQL query to select 
all rows from both participating tables as long as there is a match between pro_com and com_id.
**/
SELECT * FROM company_mast INNER JOIN item_mast
ON company_mast.com_id = item_mast.pro_com;

/**22. Write a SQL query to display the item name, price, and 
company name of all the products.
**/
SELECT item_mast.pro_name, item_mast.pro_price, company_mast.com_name FROM company_mast INNER JOIN item_mast
ON company_mast.com_id = item_mast.pro_com;

/**23. From the following tables write a SQL query to calculate 
the average price of items of each company. Return average value 
and company name.
**/
SELECT AVG(item_mast.pro_price), company_mast.com_name
FROM item_mast INNER JOIN company_mast
ON item_mast.pro_com = company_mast.com_id
GROUP BY company_mast.com_name;

/**24. From the following tables write a SQL query to calculate 
and find the average price of items of each company higher than 
or equal to Rs. 350. Return average value and company name.
**/
SELECT avg(item_mast.pro_price), company_mast.com_name
FROM item_mast INNER JOIN company_mast
ON item_mast.pro_com = company_mast.com_id
GROUP BY company_mast.com_name
HAVING avg(item_mast.pro_price) >= 350;

/**25. From the following tables write a SQL query to find the 
most expensive product of each company. Return pro_name, 
pro_price and com_name.**/
SELECT A.pro_name, A.pro_price, F.com_name
FROM item_mast A  INNER JOIN company_mast F
ON A.pro_com = F.com_id
AND A.pro_price = (SELECT MAX(A.pro_price)
     FROM item_mast A
     WHERE A.pro_com = F.com_id);

/**26. From the following tables write a SQL query to display all
 the data of employees including their department.**/
SELECT * FROM emp_details inner join emp_department
ON emp_department.dpt_code = emp_details.emp_dept;

/**27. From the following tables write a SQL query to display 
the first and last names of each employee, as well as the department name and sanction amount.**/
SELECT E.emp_fname, E.emp_lname, D.dpt_name, D.dpt_allotment
FROM emp_department D inner join emp_details e
ON E.emp_dept = D.dpt_code;

/**28. From the following tables write a SQL query to find the 
departments with budgets more than Rs. 50000 and display the first name and last name of employees.**/
SELECT E.emp_fname, E.emp_lname
FROM emp_details E inner join emp_department D
ON E.emp_dept = D.dpt_code
WHERE D.dpt_allotment > 50000;

/**29. From the following tables write a SQL query to find the 
names of departments where more than two employees are employed.
 Return dpt_name.**/
SELECT D.dpt_name FROM emp_department D
inner join emp_details E
ON E.emp_dept = D.dpt_code
GROUP BY D.dpt_name 
HAVING COUNT(*) > 2;











