/**1. From the following tables, write a SQL query to find all 
the orders issued by the salesman 'Paul Adam'. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.**/
SELECT *
FROM orders
WHERE salesman_id IN(SELECT salesman_id FROM salesman WHERE name = 'Paul Adam');

/**2. From the following tables write a SQL query to find all 
orders generated by London-based salespeople. Return ord_no, purch_amt, ord_date, customer_id, salesman_id.**/
SELECT * FROM orders
where salesman_id IN(SELECT salesman_id 
FROM salesman
WHERE city = 'London');

/**3. From the following tables write a SQL query to find all 
orders generated by the salespeople who may work for customers 
whose id is 3007. Return ord_no, purch_amt, ord_date, customer_id, salesman_id.**/
SELECT * FROM orders
where salesman_id = (SELECT DISTINCT salesman_id 
     FROM orders 
     WHERE customer_id = 3007);

/**4. From the following tables write a SQL query to find the 
order values greater than the average order value of 10th 
October 2012. Return ord_no, purch_amt, ord_date, customer_id, salesman_id.**/
SELECT * FROM orders
WHERE purch_amt > (select avg(purch_amt) from orders
WHERE ord_date = '10-10-2012');

/**5. From the following tables, write a SQL query to find all 
the orders generated in New York city. Return ord_no, purch_amt, 
ord_date, customer_id and salesman_id.**/
SELECT * FROM orders
WHERE salesman_id IN(SELECT salesman_id FROM 
salesman WHERE city = 'New York');

/**6. From the following tables write a SQL query to determine 
the commission of the salespeople in Paris. Return commission.**/
SELECT commission FROM salesman
WHERE salesman_id IN (SELECT salesman_id FROM 
salesman WHERE city = 'Paris');

/**7. Write a query to display all the customers whose ID is 2001 below the salesperson ID of Mc Lyon.**/
SELECT * FROM customers
WHERE customer_id = (SELECT salesman_id -2001 FROM salesman
WHERE name = 'Mc Lyon');

/**8. From the following tables write a SQL query to count the 
number of customers with grades above the average in New York City. Return grade and count.  **/
SELECT grade, COUNT(*) FROM customer
GROUP BY grade
HAVING grade > (SELECT AVG(grade) FROM customer
WHERE city = 'New York');

/**9. From the following tables, write a SQL query to find those 
salespeople who earned the maximum commission. Return ord_no, 
purch_amt, ord_date, and salesman_id.**/
SELECT ord_no, purch_amt, ord_date, salesman_id 
FROM orders 
WHERE salesman_id IN ( SELECT salesman_id 
    FROM salesman
    WHERE commission = (SELECT MAX(commission) 
        FROM salesman
    )
);

/**10. From the following tables write SQL query to find the 
customers who placed orders on 17th August 2012. Return ord_no, 
purch_amt, ord_date, customer_id, salesman_id and cust_name.**/
SELECT O.*, C.cust_name
FROM orders O INNER JOIN customer C
ON O.customer_id = C.customer_id
WHERE O.ord_date = '2012-08-17';

/**11. From the following tables write a SQL query to find 
salespeople who had more than one customer. Return salesman_id 
and name.**/
SELECT salesman_id, name
FROM salesman a
WHERE 1 < (select count(*) FROM customer WHERE salesman_id = a.salesman_id);

/**12. From the following tables write a SQL query to find those 
orders, which are higher than the average amount of the orders. 
Return ord_no, purch_amt, ord_date, customer_id and salesman_id.**/
SELECT * FROM orders A
WHERE purch_amt > (select AVG(purch_amt) FROM orders B WHERE b.customer_id = a.customer_id );

/**13. From the following tables write a SQL query to find those 
orders that are equal or higher than the average amount of the 
orders. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.**/
SELECT * FROM orders a
WHERE purch_amt >=
(SELECT AVG(purch_amt) From orders b
WHERE b.customer_id = a.customer_id);

/** 14. Write a query to find the sums of the amounts from the orders 
table, grouped by date, and eliminate all dates where the sum was not at 
least 1000.00 above the maximum order amount for that date.**/
SELECT SUM(purch_amt) FROM orders
GROUP BY ord_date
HAVING sum(purch_amt) >
(select 1000.00 + max(purch_amt) 
FROM orders b
WHERE a.ord_date = b.ord_date);

/**15. Write a query to extract all data from the customer table if and 
only if one or more of the customers in the customer table are located in London. Sample table : Customer**/
SELECT customer_id, cust_name, city FROM customer
WHERE EXISTS (select * from customer
where city = 'London');

/**16. From the following tables write a SQL query to find salespeople who 
deal with multiple customers. Return salesman_id, name, city and commission.**/
SELECT * FROM salesman
WHERE salesman_id IN(
SELECT DISTINCT salesman_id FROM customer a
WHERE EXISTS (
SELECT * FROM customer b
WHERE b.salesman_id = a.salesman_id
AND B.cust_name <> a.cust_name));

/**17. From the following tables write a SQL query to find salespeople 
who deal with a single customer. Return salesman_id, name, city and commission.
**/
SELECT * FROM salesman
where salesman_id IN (SELECT DISTINCT salesman_id
FROM customer a
WHERE NOT EXISTS (SELECT * FROM customer b
WHERE a.salesman_id = b.salesman_id
and a.cust_name <> b.cust_name));

/**18. From the following tables, write a SQL query to find the 
salespeople who deal the customers with more than one order. Return salesman_id, name, city and commission.
**/
SELECT * FROM salesman a
where exists(select * from customer b
where a.salesman_id = b.salesman_id
and 1< (select count(*) from orders
where orders.customer_id = b.customer_id));

/**19. From the following tables write a SQL query to find the salespeople
 who deal with those customers who live in the same city. Return 
salesman_id, name, city and commission.
**/

SELECT * FROM salesman 
WHERE city = any (select city from customer);

/**
20. From the following tables write a SQL query to find salespeople whose 
place of residence matches any city where customers live. Return 
salesman_id, name, city and commission.
**/
SELECT * FROM salesman
WHERE CITY IN (SELECT city FROM customer);

/**
21. From the following tables write a SQL query to find all those 
salespeople whose names appear alphabetically lower than the customerâ€™s 
name. Return salesman_id, name, city, commission.
**/
SELECT * FROM salesman a
WHERE EXISTS
(SELECT * FROM customer b
WHERE a.name < b.cust_name);

/**
22. From the following table write a SQL query to find all those 
customers with a higher grade than all the customers alphabetically 
below the city of New York. Return customer_id, cust_name, city, grade, salesman_id.
**/
SELECT * FROM customer
WHERE grade > any
(select grade from customer where city < 'New York');

/**23. From the following table write a SQL query to find all those 
orders whose order amount exceeds at least one of the orders placed on 
September 10th 2012. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
**/
SELECT * FROM orders
WHERE purch_amt > any (SELECT purch_amt FROM orders
WHERE ord_date = '2012-09-10');

/**
24. From the following tables write a SQL query to find orders where the 
order amount is less than the order amount of a customer residing in
 London City. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
**/
SELECT * FROM orders 
WHERE purch_amt < any (SELECT purch_amt FROM orders a, customer b
WHERE a.customer_id = b.customer_id
and b.city = 'London');

/**
25. From the following tables write a SQL query to find those orders where 
every order amount is less than the maximum order amount of a customer 
who lives in London City. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
**/
SELECT * FROM orders
WHERE purch_amt < (SELECT MAX(purch_amt) FROM orders a, customer b 
WHERE a.customer_id = b.customer_id
and b.city= 'London'); 

/**
26. From the following tables write a SQL query to find those customers 
whose grades are higher than those living in New York City. Return customer_id, 
cust_name, city, grade and salesman_id.
**/
SELECT * FROM customer
WHERE grade > all (SELECT grade FROM customer
WHERE city = 'New York');

/**
27. From the following tables write a SQL query to calculate the total 
order amount generated by a salesperson. Salespersons should be from the 
cities where the customers reside. Return salesperson name, city and total order amount.
**/
SELECT salesman.name, salesman.city, subquery1.total_amt
FROM salesman,
(SELECT salesman_id, SUM(orders.purch_amt) as total_amt FROM orders
GROUP BY salesman_id) subquery1
WHERE subquery1.salesman_id = salesman.salesman_id
and salesman.city IN (SELECT DISTINCT city FROM customer);

/**
28. From the following tables write a SQL query to find those customers 
whose grades are not the same as those who live in London City. Return customer_id, 
cust_name, city, grade and salesman_id.
**/
SELECT * FROM customer
WHERE grade <> ALL (SELECT grade FROM customer
WHERE city = 'London' AND grade is not null);

/**
29. From the following tables write a SQL query to find those customers 
whose grades are different from those living in Paris. Return customer_id, 
cust_name, city, grade and salesman_id.
**/
SELECT * FROM customer
WHERE grade NOT IN (SELECT grade FROM customer 
WHERE city = 'Paris');

/**
30. From the following tables write a SQL query to find all those 
customers who have different grades than any customer who lives in 
Dallas City. Return customer_id, cust_name,city, grade and salesman_id.
**/
SELECT * FROM customer
WHERE NOT grade = any(SELECT grade FROM customer WHERE city = 'Dallas');

/**
31. From the following tables write a SQL query to calculate the average
 price of each manufacturer's product along with their name. Return Average Price and Company.
**/
SELECT AVG(pro_price) AS "Average Price", 
   company_mast.com_name As "Company"
FROM item_mast INNER JOIN  company_mast
ON company_mast.com_id = item_mast.pro_com
GROUP BY company_mast.com_name;

/**
32. From the following tables write a SQL query to calculate the average 
price of each manufacturer's product of 350 or more. Return Average Price and Company.
**/
SELECT company_mast.com_name, AVG(item_mast.pro_price)
FROM company_mast INNER JOIN item_mast
ON company_mast.com_id = item_mast.pro_com
GROUP BY company_mast.com_name
HAVING AVG(item_mast.pro_price) >= 350;

/**
33. From the following tables, write a SQL query to find the most expensive product of each company. Return Product Name, Price and Company.
**/
SELECT P.pro_name, P.pro_price, C.com_name
FROM item_mast P INNER JOIN company_mast C
ON P.pro_com = C.com_id
AND P.pro_price =
(SELECT MAX(P.pro_price)
FROM item_mast P
WHERE P.pro_com = C.com_id);

/**
34. From the following tables write a SQL query to find employees 
whose last name is Gabriel or Dosio. Return emp_idno, emp_fname, emp_lname and emp_dept.
**/
SELECT * FROM emp_details
WHERE emp_lname IN ('Gabriel', 'Dosio');

/**
35. From the following tables, write a SQL query to find the employees 
who work in department 89 or 63. Return emp_idno, emp_fname, emp_lname and emp_dept.
**/
SELECT * FROM emp_details
WHERE emp_dept IN (89, 63);

/**
36. From the following tables write a SQL query to find those employees 
who work for the department where the departmental allotment amount is 
more than Rs. 50000. Return emp_fname and emp_lname.
**/
SELECT emp_fname, emp_lname
FROM emp_department D INNER JOIN emp_details E
ON D.dpt_code = E.emp_dept
WHERE D.dpt_allotment > 50000;

/**
37. From the following tables write a SQL query to find the departments 
whose sanction amount is higher than the average sanction amount for all 
departments. Return dpt_code, dpt_name and dpt_allotment.
**/
SELECT * FROM emp_department
WHERE dpt_allotment > (SELECT AVG(dpt_allotment) FROM emp_department);

/**
38. From the following tables write a SQL query to find which departments 
have more than two employees. Return dpt_name.
**/
SELECT dpt_name FROM emp_department
WHERE dpt_code IN (SELECT emp_dept FROM emp_details GROUP BY emp_dept HAVING COUNT(*) > 2
);

/**
39. From the following tables write a SQL query to find the departments 
with the second lowest sanction amount. Return emp_fname and emp_lname.
**/
SELECT emp_fname, emp_lname FROM emp_details
WHERE emp_dept IN (
            SELECT dpt_code FROM emp_department
            WHERE dpt_allotment = (
                                SELECT min(dpt_allotment) 
                                 FROM emp_department 
                                    WHERE dpt_allotment > (
                                    SELECT MIN(dpt_allotment) 
                                      FROM emp_department)));