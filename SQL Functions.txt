-- SQL FUNCTIONS ---

-- ABS--

--ABS returns the absolute value. 
--The output is positive even if the input is negative:

ABS(x) = x if x>=0
 ABS(x) = -x if x<0

-- 1.
ABS can be useful for testing values that are "close". 
-- For example this query shows each country that has area that is roughly 
-- 70 thousand. The value 70000 is the target value, 500 is the 
--"tolerance" so the test ABS(area-70000)<500 tests that the area is 
-- between 70000-500 and 70000+500. That is 69500<area<70500

SELECT name, area FROM bbc
 WHERE ABS(area-70000)<500;

-- AVG --

-- AVG gives the average (the mean) of a whole column or a group of rows for a single column of values.
--AVG is an aggregate function it is normally used with GROUP BY.
--The mean of the values 2, 5, 5 is (2+5+5)/3 = 12/3 = 4, you divide by 3 because there are 3 numbers in this example.
--NULL values do not contribute to the calculation.

-- 2. With a GROUP BY region statement each region shows up just once. 
--The AVG column gives the average population per country for each region.

SELECT region, AVG(population)
  FROM bbc
 GROUP BY region;

-- STRINGS --

--|| (strings)

-- || allows you to stick two or more strings together.
-- This operation is concatenation.
-- S1 || S2

-- 3. In this example you put the region and the name together for each country.

SELECT CONCAT(region,name)
  FROM bbc;

-- CASE --

-- CASE allows you to return different values under different conditions.
--If there no conditions match (and there is not ELSE) then NULL is returned.

  CASE WHEN condition1 THEN value1 
       WHEN condition2 THEN value2  
       ELSE def_value 
  END 

SELECT name, population
      ,CASE WHEN population<1000000 
            THEN 'small'
            WHEN population<10000000 
            THEN 'medium'
            ELSE 'large'
       END
  FROM bbc;

-- CAST --

-- 5. CAST allows you to convert from one type to another.
--Often a CAST is implicit - for example if you concatenate a 
--string with a number the number will be automatically changed to a string. 
--However sometimes you need to make the CAST explicit.
--  CAST(expr TO type) 

--In this example we get the population in millions by 
--casting the floating point value to DECIMAL(8,1) - this ensures 
--one decimal place of accuracy. You can also CAST a date to a string to 
--extract components using SUBSTRING or make up another date.

SELECT CAST(population/1000000 
       AS DECIMAL(8,1)) AS a
      ,population/1000000 AS b
  FROM bbc;

-- CEIL --

-- 6. CEIL
--CEIL(f) is ceiling, it returns the integer that is equal to or just more than f
--CEIL(f) give the integer that is equal to, or just higher than f. CEIL always rounds up.

 CEIL(2.7)  ->  3
 CEIL(-2.7) -> -2

-- In this example we calculate the population in millions.

SELECT population/1000000 AS a,
       CEIL(population/1000000) AS b
  FROM bbc;

-- COALESCE --

-- 7. COALESCE
--COALESCE takes any number of arguments and returns the first value that is not null.
-- We use IFNULL in mysql.

  COALESCE(x,y,z) = x if x is not NULL
  COALESCE(x,y,z) = y if x is NULL and y is not NULL
  COALESCE(x,y,z) = z if x and y are NULL but z is not NULL
  COALESCE(x,y,z) = NULL if x and y and z are all NULL

--COALESCE can be useful when you want to replace a NULL value with some 
-- other value. In this example you show the name of the party for each 
-- MSP that has a party. For the MSP with no party (such as Canavan, Dennis) you show the string None.

SELECT name, party
      ,IFNULL(party,'None') AS aff
  FROM msp WHERE name LIKE 'C%';

-- CONCAT --

-- CONCAT allows you to stick two or more strings together.
-- This operation is concatenation.

CONCAT(s1, s2 ...)  

--8. In this example you put the region and the name together for each country.

SELECT CONCAT(region,name)
  FROM bbc;

-- COS --

-- 9. COS(f) returns the cosine of f where f is in Degrees.
--   COS(3.14159/3) -> -1.0 
-- In this example you return the cosine of each of the angles.

SELECT id, angle, COS(angle)
FROM angle;

-- COUNT --

-- 10. COUNT(column_name) finds the number of non-null values in a column. 
--COUNT(*) also counts the null values.
--COUNT is an aggregate function it is normally used with GROUP BY.

  SELECT region, COUNT(name)
    FROM bbc
   GROUP BY region;

-- CURRENT DATE --
-- 11. CURRENT_DATE returns today's date.
--  CURRENT_DATE -> '2006-12-31'

SELECT CAST(CURRENT_DATE AS DATE),wk
  FROM totp;

-- CURRENT_TIMESTAMP --

-- 12. CURRENT_TIMESTAMP returns the current date and time.
-- CURRENT_TIMESTAMP -> '2006-12-31 18:03:44'

SELECT CURRENT_TIMESTAMP, whn
  FROM eclipse;

-- DATAPART --

-- 12. DATEPART allows you to retrieve components of a date.
-- You can extract also YEAR, MONTH, DAY, HOUR, MINUTE, SECOND.
-- in mysql we'll use EXTRACT(YEAR FORM d)

-- In this example you get the year and the month from the date whn.

SELECT whn
      ,EXTRACT(YEAR FROM td)  AS yr
      ,EXTRACT(MONTH FROM td) AS mnth
  FROM eclipse;

-- DAY --

-- 13. DAY allows you to retrieve the day from a date.
-- DAY(d)
-- In this example you get the day from the date field whn.

SELECT DAY(whn) AS v
      ,whn
      ,wht
  FROM eclipse;

-- DIV --

-- 14. a DIV b returns the integer value of a divided by b.
-- 8 DIV 3 -> 2 
-- n this example we calculate the population in millions.

SELECT name,
       population DIV 1000000
  FROM bbc;

-- EXTRACT --

-- 15. EXTRACT allows you to retrieve components of a date.
-- You can extract also YEAR, MONTH, DAY, HOUR, MINUTE, SECOND

-- In this example you get the year and the hour from the date whn.


SELECT whn
      ,EXTRACT(YEAR FROM td)  AS yr
      ,EXTRACT(HOUR FROM td) AS hr
  FROM eclipse;

-- FLOOR --

-- 16. FLOOR(f) returns the integer value of f
-- FLOOR(f) give the integer that is equal to, or 
-- just less than f. FLOOR always rounds down.

--  FLOOR(2.7) ->  2
--  FLOOR(-2.7) -> -3

--In this example we calculate the population in millions.

SELECT name,
       FLOOR(population/1000000)
  FROM bbc;

-- HOUR --

-- 17. HOUR allows you to retrieve the hour from a datetime.
-- HOUR(d)

-- In this example you get the hour from the datetime field whn.

SELECT HOUR(whn) AS v, whn, wht
  FROM eclipse;

-- IFNULL --

-- 18. IFNULL takes two arguments and returns the first value that is not null.

-- IFNULL(x,y) = x if x is not NULL
-- IFNULL(x,y) = y if x is NULL

-- IFNULL can be useful when you want to replace a NULL value with some 
-- other value. In this example you show the name of the party for each MSP 
-- that has a party. For the MSP with no party (such as Canavan, Dennis) you show the string None.

SELECT name, party
      ,IFNULL(party,'None') AS aff
  FROM msp WHERE name LIKE 'C%';

-- INSTR --


-- 19. INSTR(s1, s2) returns the character position of the substring s2 
-- within the larger string s1. The first character is in position 1. 
-- If s2 does not occur in s1 it returns 0.

-- INSTR('Hello world', 'll') -> 3 
-- In this example you get the position of string 'an' within a country's name.

SELECT name,
       INSTR(name, 'an')
  FROM bbc;

-- LEFT --

-- 20. LEFT(s,n) allows you to extract n characters from the start of the string s.
--  LEFT('Hello world', 4) -> 'Hell' 

SELECT name,
       LEFT(name, 3)
  FROM bbc;

-- LEN --

-- 21. LEN(s) returns the number of characters in string s.
-- LEN('Hello') -> 5  

SELECT LENGTH(name), name
  FROM bbc;

-- LENGTH --

-- 22. LENGTH(s) returns the number of characters in string s.

-- LENGTH('Hello') -> 5 

SELECT LENGTH(name), name
  FROM bbc;

-- MAX --

-- 23. MAX finds the highest values in a column or part of a column

-- MAX is an aggregate function it is normally used with GROUP BY.

 --SELECT region, MAX(name)
   -- FROM bbc
  -- GROUP BY region;

-- With a GROUP BY region statement each region shows up just once. 
-- The MAX column gives the "largest" name in the region in the context of 
-- strings this is the last name alphabetically.

SELECT region, MAX(name)
  FROM bbc
 GROUP BY region;

-- MIN --

-- 24. MIN finds the smallest values in a column or part of a column
-- MIN is an aggregate function it is normally used with GROUP BY.

-- With a GROUP BY region statement each region shows up just once. 
-- The MIN column gives the "smallest" name in the region in the context of strings this is the first name alphabetically.
 
 SELECT region, MIN(name)
    FROM bbc
   GROUP BY region;

-- MINUTE --


-- 25. MINUTE allows you to retrieve the minute from a date.
-- MINUTE(d)

-- In this example you get the minute from the date field whn.

SELECT MINUTE(whn) AS v, whn, wht
  FROM eclipse;

-- MOD --

-- 25. MOD(a,b) returns the remainder when a is divied by b
--If you use MOD(a, 2) you get 0 for even numbers and 1 for odd numbers.
--If you use MOD(a, 10) you get the last digit of the number a.

-- MOD(27,2) ->  1
-- MOD(27,10) ->  7

-- In this example you get the final digit year of the games.

SELECT MOD(yr,10),
       yr, city
  FROM games;

-- MONTH --

-- 26. MONTH allows you to retrieve the month from a date.
-- MONTH(d)

-- In this example you get the month from the date field whn.

SELECT MONTH(whn) AS v, whn, wht
  FROM eclipse;

-- NULLIF --

-- 27. NULLIF returns NULL if the two arguments are equal; otherwise NULLIF returns the first argument.

--   NULLIF(x,y) = NULL if x=y
--   NULLIF(x,y) = x if x != y

-- NULLIF can be used to replace a specific value with NULL. In this example the party Lab is replaced with NULL.

SELECT name, party
      ,NULLIF(party,'Lab') AS aff
  FROM msp WHERE name LIKE 'C%';

-- NVL --

-- 28. NVL takes two arguments and returns the first value that is not null.

--  NVL(x,y) = x if x is not NULL
--   NVL(x,y) = y if x is NULL

-- NVL can be useful when you want to replace a NULL value with some 
-- other value. In this example you show the name of the party for each 
-- MSP that has a party. For the MSP with no party (such as Canavan, Dennis) you show the string None.

SELECT name, party
      ,COALESCE(party,'None') AS aff
  FROM msp WHERE name LIKE 'C%';

-- PATINDEX --

-- 29. PATINDEX('%s1%', s2) returns the character position of the substring 
-- s1 within the larger string s2. The first character is in position 1. 
--If s1 does not occur in s2 it returns 0. The match is case insensitive.

-- PATINDEX('%ll%' 'Hello world') -> 3 

--In this example you return the position of the string 'an' within the name of the country.

SELECT name,
       POSITION('an' IN name)
  FROM bbc;

--  % (MODULO) --

-- 30. a % b returns the remainder when a is divied by b
-- If you use a % 2 you get 0 for even numbers and 1 for odd numbers.
-- If you use a % 10 you get the last digit of the number a.

-- 27 % 2  ->  1
-- 27 % 10 ->  7

-- In this example you get the final digit year of the games.

SELECT yr % 10,
       yr, city
  FROM games;

-- + (dates) --

-- 31. d + i returns the date i days after the date d.

-- DATE '2006-05-20' + 7  -> DATE '2006-05-27'

SELECT whn, whn+7 
  FROM eclipse;

-- + INTERVAL --

-- 32. d + INTERVAL i DAY returns the date i days after the date d.
-- You can also add YEAR, MONTH, DAY, HOUR, MINUTE, SECOND
-- You can also add a negative value.
--  DATE '2006-05-20' + INTERVAL 5 DAY   -> DATE '2006-05-25' 
-- DATE '2006-05-20' + INTERVAL 5 MONTH -> DATE '2006-10-20' 
-- DATE '2006-05-20' + INTERVAL 5 YEAR  -> DATE '2011-05-20'

-- In this example we show the date 7 days after the value specified in whn

SELECT whn, whn+INTERVAL 7 DAY
  FROM eclipse;

-- + (strings) --

-- 33. + allows you to stick two or more strings together.
-- This operation is concatenation.
-- S1+ S2

-- In this example you put the region and the name together for each country.

SELECT CONCAT(region,name)
  FROM bbc;

-- POSITION --

-- POSITION(s1 IN s2) returns the character position of the substring s1 
-- within the larger string s2. The first character is in position 1. 
-- If s1 does not occur in s2 it returns 0.

-- 34. POSITION('ll' IN 'Hello world') -> 3  

-- In this example you return the position of the string 'an' within the name of the country.

SELECT name,
       POSITION('an' IN name)
  FROM bbc;

-- QUARTER --

-- 35. QUARTER allows you to retrieve the 3 month period from a date.

-- QUARTERS
-- First Quarter	January 1	March 31
-- Second Quarter	April 1	June 30
-- Third Quarter	July 1	September 30
-- Fourth Quarter	October 1	December 31

-- QUARTER(d)

-- In this example you get the quarter from the date field wk. Lately, Cliff Richard favours Q4.

SELECT wk,
       QUARTER(wk) AS Quarter,
       song
  FROM totp
 WHERE singer = 'Cliff Richard'
 ORDER BY wk DESC;

-- RANK --

-- 36. RANK() OVER (ORDER BY f DESC) returns the rank position relative to the expression f.
--  RANK() OVER (ORDER BY f DESC) 

-- You can see view the RANK according to continent. This shows the biggest country

SELECT
 name,population,
 RANK() OVER (ORDER BY population DESC) AS world_rank,
 RANK() OVER (PARTITION BY continent ORDER BY population DESC) 
            AS local_rank
FROM world WHERE population>100000000
ORDER BY name;

-- REPLACE --

-- 37. REPLACE(f, s1, s2) returns the string f with all occurances of s1 replaced with s2.

-- REPLACE('vessel','e','a') -> 'vassal'

-- In this example you remove all the 'a's from the name of each country. This happens because the string 'a' is replaced with .

SELECT name,
       REPLACE(name, 'a','')
  FROM bbc;

-- RIGHT --

-- 38. RIGHT(s,n) allows you to extract n characters from the end of the string s.

-- RIGHT('Hello world', 4) -> 'orld' 

SELECT name,
       RIGHT(name, 3)
  FROM bbc;

-- ROUND --

-- 39. ROUND(f,p) returns f rounded to p decimal places.
-- The number of decimal places may be negative, this will round to the nearest 10 (when p is -1) or 
-- 100 (when p is -2) or 1000 (when p is -3) etc..

-- ROUND(7253.86, 0)    ->  7254
-- ROUND(7253.86, 1)    ->  7253.9
-- ROUND(7253.86,-3)    ->  7000

-- In this example we calculate the population in millions to one decimial place.

SELECT name,
       ROUND(population/1000000,1)
  FROM bbc;

-- SECOND --

-- 40. SECOND allows you to retrieve the second from a date.
-- SECOND(d)

-- In this example you get the second from the date field whn.

SELECT SECOND(whn) AS v, whn, wht
  FROM eclipse;

-- SIN --

-- 41. SIN(f) returns the sine of f where f is in radians.

-- SIN(3.14159/6) -> 0.5  
-- In this example you return the sine of each of the angles.

SELECT id, angle, SIN(angle)
FROM angle;

-- SUBSTR --

-- 42. SUBSTR allows you to extract part of a string.

--    SUBSTR('Hello world', 2, 3) -> 'ell' 

-- In this example you get the 2nd to 5th character from each country's name.

SELECT name,
       SUBSTR(name, 2, 5)
  FROM bbc;

-- SUBSTRING (ansi) --

-- 43. SUBSTRING allows you to extract part of a string.

-- SUBSTRING('Hello world' FROM 2 FOR 3) -> 'ell'  

-- In this example you get the 2nd to 5th character from each country's name.

SELECT name,
       SUBSTRING(name FROM 2 FOR 5)
  FROM bbc;

-- SUBSTRING --

-- 44. SUBSTRING allows you to extract part of a string.

--  SUBSTRING('Hello world', 2, 3) -> 'ell' 

-- In this example you get the 2nd to 5th character from each country's name.

SELECT name,
       SUBSTRING(name, 2, 5)
  FROM bbc;

-- SUM --

-- 45. SUM adds a whole column of values.

-- SUM is an aggregate function it is normally used with GROUP BY.

-- With a GROUP BY region statement each region shows up just once. The SUM column gives the total for each region.


   SELECT region, SUM(population)
    FROM bbc
   GROUP BY region;

-- TAN --

-- 45. TAN(f) returns the tangent of f where f is in radians.

-- TAN(3.14159/4) -> 1

-- In this example you return the tangent of each of the angles.

SELECT id, angle, TAN(angle)
FROM angle;

-- 46. TO_CHAR (dates) --


-- TO_CHAR allows you to convert a date to a string using a variety of formats.

--  TO_CHAR(d, 'YYYY') -> Four digit year
--  TO_CHAR(d, 'MM')   -> Two digit month
--  TO_CHAR(d, 'DD')   -> Two digit day
--  TO_CHAR(d, 'HH24') -> Two digit hour
--  TO_CHAR(d, 'MI')   -> Two digit minutes
--  TO_CHAR(d, 'MON')  -> Three character month

-- In this example you get the month as a three character abbreviation and a four digit year from the date field whn.

SELECT EXTRACT(YEAR from whn) AS v, whn, wht
  FROM eclipse;

-- 47. TRIM --

-- TRIM(s) returns the string with leading and trailing spaces removed.

-- TRIM('Hello world  ') -> 'Hello world'

--This function is particularly useful when working with CHAR fields. Typically a CHAR field is paddded with spaces. 
--In contrast a VARCHAR field does not require padding.

SELECT name,
       TRIM(name)
  FROM bbc;

-- YEAR --

-- YEAR allows you to retrieve the year from a date.

--    YEAR(d)

-- In this example you get the year from the date field whn.

SELECT YEAR(whn) AS v, whn, wht
  FROM eclipse;





  















































































































